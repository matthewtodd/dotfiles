#!/bin/bash

set -euo pipefail

DIR=$(cd "$(dirname "$0")"; pwd)

mkdir -p "${HOME}/.config"
mkdir -p "${HOME}/.local"

ln -sfh "${DIR}/bin" "${HOME}/.local/bin"
ln -sfh "${DIR}/etc/fish" "${HOME}/.config/fish"
ln -sfh "${DIR}/etc/gh" "${HOME}/.config/gh"
ln -sfh "${DIR}/etc/git" "${HOME}/.config/git"
ln -sfh "${DIR}/etc/nvim" "${HOME}/.config/nvim"
ln -sfh "${DIR}/etc/tmux" "${HOME}/.config/tmux"

# I would like to just symlink all of etc into ~/.config, but some programs
# don't use their config directories in version-controllable ways. They should
# perhaps look to XDG_DATA_HOME instead!
#
# The offenders:
# - gcloud writes auth tokens and python virtualenvs.
#   So using .gitignore means I'm one `git clean` away from logging myself out.
#   Hypothetically speaking.
# - npm uses update-notifier, which uses configstore to track update checks.
#   https://www.npmjs.com/package/update-notifier
#   https://github.com/yeoman/update-notifier/blob/3046d0f61a57f8270291b6ab271f8a12df8421a6/update-notifier.js#L65-L70
#   https://www.npmjs.com/package/configstore
# - op stores volatile state as well as a daemon socket.
#
# But if a new program starts writing into ~/.config, I want to see it here so
# I can consider adding it to version control, hence this `find` call.
#
# And now that I see some of these, I really don't care about them. For the
# moment, I've got default-value config files that I'll never need to do
# anything with. So let's exclude those now, to save some noise:
# - dlv
# - jgit
#
find "${HOME}/.config" -type d -depth 1 \
  -not -name configstore \
  -not -name dlv \
  -not -name gcloud \
  -not -name jgit \
  -not -name op \
  -exec echo "$(tput setaf 3)Consider adding '{}' to version control.$(tput sgr0)" \;

which brew \
  || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

brew update --verbose
brew bundle install --cleanup --verbose --file="${DIR}/pkg/Brewfile"
brew cleanup --verbose
brew completions link

grep -q /usr/local/bin/fish /etc/shells \
  || sudo bash -c 'echo /usr/local/bin/fish >> /etc/shells'

# https://stackoverflow.com/a/41553295
dscl . -read ~ UserShell | grep -q /usr/local/bin/fish \
  || chsh -s /usr/local/bin/fish

gcloud components install beta
gcloud components install gke-gcloud-auth-plugin

fish -c "git submodule update --init --remote"
fish -c "npm install -g eslint; npm update -g eslint" # vscode-eslint-language-server expects this either globally or in the project
fish -c "nvim -c 'helptags ALL' -c quit"
fish -c "cd ${DIR}/pkg && bundle update"
fish -c "cd ${DIR}/pkg && npm update"
fish -c "cd ${DIR}/src/backport && go build -o ${DIR}/bin/backport"
fish -c "cd ${DIR}/src/crlfmt && go build -o ${DIR}/bin/crlfmt"
fish -c "cd ${DIR}/src/gofumpt && go build -o ${DIR}/bin/gofumpt"
fish -c "cd ${DIR}/src/gops && go build -o ${DIR}/bin/gops"
fish -c "cd ${DIR}/src/golang-tools/gopls && go build -o ${DIR}/bin/gopls"

(
  current=$(fish -c "git config --file ${DIR}/.gitmodules --get submodule.golang-tools.branch")
  latest=$(fish -c "cd ${DIR}/src/golang-tools && git branch -a | grep gopls-release | cut -d/ -f3 | sort --version-sort | tail -1")
  if [ "$current" != "$latest" ]; then
    echo "$(tput setaf 3)There is a new version of gopls available!$(tput sgr0)"
    echo "$(tput setaf 3)${current#gopls-release-branch.} -> ${latest#gopls-release-branch.}$(tput sgr0)"
    echo "$(tput setaf 3)https://github.com/golang/tools/releases$(tput sgr0)"
    echo "$(tput setaf 13)  git submodule set-branch -b ${latest} golang-tools$(tput sgr0)"
    echo "$(tput setaf 13)  git submodule update --init --remote src/golang-tools$(tput sgr0)"
    echo "$(tput setaf 13)  cd src/golang-tools/gopls$(tput sgr0)"
    echo "$(tput setaf 13)  go build -o ${DIR}/bin/gopls$(tput sgr0)"
  fi
)

# https://github.com/Hammerspoon/hammerspoon/pull/582
fish -c "defaults write org.hammerspoon.Hammerspoon MJConfigFile ${DIR}/etc/hammerspoon/init.lua"

swift "${DIR}/libexec/dynamic_desktop.swift ${HOME}/Pictures/Solarized.heic"
swift "${DIR}/libexec/set_wallpaper.swift ${HOME}/Pictures/Solarized.heic"
swift "${DIR}/libexec/terminal_profiles.swift"

# Why not? This could be fun.
open raycast://confetti
