" don't bother with vi compatibility
set nocompatible

" early set up various paths roughly according to the XDG spec
set runtimepath+=$XDG_CONFIG_HOME/vim
call xdg#setup()

" set up vim-plug, https://github.com/junegunn/vim-plug
call plug#begin()
Plug 'austintaylor/vim-indentobject'
Plug 'chiel92/vim-autoformat'
Plug 'dag/vim-fish'
Plug 'djoshea/vim-autoread'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'udalov/kotlin-vim'
call plug#end()

" general settings
set backupcopy=yes  " see :help crontab
set clipboard=unnamed
set grepformat=%f:%l:%c:%m
set grepprg=ag\ --vimgrep\ $*
set list            " show trailing whitespace
set nohlsearch
set number          " enable line numbering
set ttimeoutlen=-1  " https://github.com/neovim/neovim/issues/2017#issuecomment-75223935
set wildmode=list:longest,full " helpful tab completion

" don't bother prompting to open these files.
set wildignore=log/**,tmp/**,*.rbc

" keyboard shortcuts
let mapleader = ','
nmap <leader>a :grep!<Space>
nmap <leader>b :FZFBuffers<CR>
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
nmap <leader>t :FZFFiles<CR>
nmap <leader><space> :RemoveTrailingSpaces<CR>

" colorscheme
silent! colorscheme solarized

" autocommands
augroup vimrc
  autocmd!
  autocmd BufEnter *.dot set makeprg=dot\ -Tpng\ %
  autocmd BufEnter *.msc set makeprg=mscgen\ -Tpng\ %
  autocmd BufWritePre * :Autoformat
  autocmd QuickFixCmdPost * cwindow
  autocmd VimResized * wincmd =
augroup END

" plugin settings
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:autoformat_verbosemode=0
" let g:autoformat_verbosemode=1
let g:formatdef_ktlint = '"ktlint --format --stdin --experimental"'
" let g:formatdef_ktlint = '"ktlint --format --stdin --experimental --debug --verbose"'
let g:formatters_kotlin = ['ktlint']
let g:formatdef_rufo = '"rufo --simple-exit"'
let g:formatters_ruby = ['rufo']
let g:fzf_command_prefix = 'FZF'
let g:fzf_layout = { 'down': '10' }
