" don't bother with vi compatibility
set nocompatible

" early set up various paths roughly according to the XDG spec
set runtimepath+=$XDG_CONFIG_HOME/vim
call xdg#setup()

" set up vim-plug, https://github.com/junegunn/vim-plug
call plug#begin()
Plug 'altercation/vim-colors-solarized'
Plug 'austintaylor/vim-indentobject'
Plug 'chiel92/vim-autoformat'
Plug 'dag/vim-fish'
Plug 'djoshea/vim-autoread'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
call plug#end()

" general settings
set backupcopy=yes  " see :help crontab
set clipboard=unnamed
set grepformat=%f:%l:%c:%m
set grepprg=ag\ --vimgrep\ $*
set list            " show trailing whitespace
set nohlsearch
set number          " enable line numbering
set ttimeoutlen=-1  " https://github.com/neovim/neovim/issues/2017#issuecomment-75223935
set wildmode=list:longest,full " helpful tab completion

" don't bother prompting to open these files.
set wildignore=log/**,tmp/**,*.rbc

" keyboard shortcuts
let mapleader = ','
nmap <leader>a :grep!<Space>
nmap <leader>b :FZFBuffers<CR>
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
nmap <leader>t :FZFFiles<CR>
nmap <leader><space> :RemoveTrailingSpaces<CR>

ruby << END
  require "pathname"
  Pathname.new(ENV["XDG_DATA_HOME"]).join("vim/ruby/2.7.0/gems").glob("ripper-tags-*") { |path| $: << path }
  require "ripper-tags"

  TAG_KINDS = {
    'method' => 'f',
    'singleton method' => 'F',
    'constant' => 'C',
    'class' => 'c',
  }.freeze

  def ruby_buffer_tags(path, pattern)
    RipperTags::Parser.extract(File.read(path), path).
      select { |tag| tag.fetch(:name) == pattern }.
      collect { |tag| {
        name: tag.fetch(:full_name),
        filename: tag.fetch(:path),
        cmd: tag.fetch(:line).to_s,
        kind: TAG_KINDS.fetch(tag.fetch(:kind)),
      } }
  end
END

" The function used for generating the taglist is specified by setting the
" 'tagfunc' option.  The function will be called with three arguments:
"    a:pattern    The tag identifier used during the tag search.
"    a:flags      List of flags to control the function behavior.
"    a:info       Dict containing the following entries:
"                     buf_ffname    Full filename which can be used for priority.
"                     user_data     Custom data String, if stored in the tag
"                                   stack previously by tagfunc.
function! RubyBufferTagFunc(pattern, flags, info)
  return rubyeval("ruby_buffer_tags('" . a:info["buf_ffname"] . "', '". a:pattern . "')")
endfunction


" When the |t_RB| option is set, Vim will use it to request the background
" color from the terminal.  If the returned RGB value is dark/light and
" 'background' is not dark/light, 'background' will be set and the
" screen is redrawn.  This may have side effects, make t_BG empty in
" your .vimrc if you suspect this problem.  The response to |t_RB| can
" be found in |v:termrbgresp|.
set background=light
silent! colorscheme solarized_16

" autocommands
augroup vimrc
  autocmd!
  autocmd BufEnter *.dot set makeprg=dot\ -Tpng\ %
  autocmd BufEnter *.msc set makeprg=mscgen\ -Tpng\ %
  autocmd BufWritePre * :Autoformat
  autocmd QuickFixCmdPost * cwindow
  autocmd VimResized * wincmd =
augroup END

" plugin settings
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatdef_rufo = '"rufo --simple-exit"'
let g:formatters_ruby = ['rufo']
let g:fzf_command_prefix = 'FZF'
let g:fzf_layout = { 'down': '10' }
