#!/usr/bin/env ruby

require 'date'

USAGE = <<-END
  tickle
    Moves actions from scheduled.txt to todo.txt according to their
    future-tasks-compatible date thresholds.
END

def tickle
  scheduled_actions.select { |action| current?(action) }.each { |action| activate!(action) }
  next_actions.reject { |action| current?(action) }.each { |action| schedule!(action) }
end

def scheduled_actions
  todo_sh('listfile scheduled').lines
end

def next_actions
  todo_sh('list').lines
end

def current?(action)
  date_threshold(action) <= Date.today
end

def date_threshold(action)
  if threshold = action.match(/\bt:(\d\d\d\d-\d\d-\d\d)\b/)
    Date.parse(threshold[1])
  else
    Date.new(1900, 1, 1) # distant past
  end
end

def activate!(action)
  move!(action, 'todo.txt', 'scheduled.txt')
end

def schedule!(action)
  move!(action, 'scheduled.txt', 'todo.txt')
end

def move!(action, destination, source)
  todo_sh('move', item_number(action), destination, source)
end

def item_number(action)
  if number = action.strip.match(/^(\d+)/)
    number[1]
  else
    0 # zero is never a real item number, and todo.sh handles it gracefully.
      # Much nicer than nil checks.
  end
end

def todo_sh(*args)
  `/usr/bin/env TODOTXT_VERBOSE=0 #{ENV['TODO_FULL_SH']} -f #{args.join(' ')}`
end

case action = ARGV.shift
when 'usage'
  puts USAGE
  exit
else
  tickle
end
