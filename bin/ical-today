#!/usr/bin/ruby -wKU

require 'date'
require 'osx/cocoa'
OSX.require_framework 'CalendarStore'

class Event < Struct.new(:event)
  # Event's class methods handle retrieving Event instances from iCal.
  class << self
    def occurring(time_range)
      find within(time_range)
    end

    private

    def find(predicate)
      store.eventsWithPredicate(predicate).map { |event| new(event) }
    end

    def store
      OSX::CalCalendarStore.defaultCalendarStore
    end

    def within(range)
      OSX::CalCalendarStore.eventPredicateWithStartDate_endDate_calendars(
        range.first, range.last, store.calendars
      )
    end
  end

  # Event instances wrap CalEvents from iCal, making them sortable and giving
  # them a nice String representation.
  include Comparable

  def <=>(other)
    self.start_date <=> other.start_date
  end

  def start_date
    event.startDate.to_ruby
  end

  def to_s
    "#{time_prefix}#{title}#{location_suffix}"
  end

  private

  def time_prefix
    if event.isAllDay
      ''
    else
      "#{start_date.in_short_time_format} - "
    end
  end

  def title
    event.title
  end

  def location_suffix
    if event.location.to_s == ''
      ''
    else
      " at #{event.location}"
    end
  end
end

class Task < Struct.new(:task)
  class << self
    def due(date)
      find before(date)
    end

    private

    def find(predicate)
      store.tasksWithPredicate(predicate).map { |task| new(task) }
    end

    def store
      OSX::CalCalendarStore.defaultCalendarStore
    end

    def before(date)
      OSX::CalCalendarStore.taskPredicateWithUncompletedTasksDueBefore_calendars(
        date, store.calendars
      )
    end
  end

  include Comparable

  def <=>(other)
    [self.due_date, self.title] <=> [other.due_date, other.title]
  end

  def due_date
    task.dueDate.to_ruby
  end

  def title
    task.title.to_ruby
  end

  def to_s
    title
  end
end

# Extend Date to make it easy to say Time.tomorrow.
class Date
  def self.tomorrow
    today.succ
  end

  def to_time
    Time.local(year, month, day)
  end
end

# Extend Time, since Time.tomorrow looks nice when paired with Time.now. Also
# give a nice String representation of Time.
class Time
  def self.tomorrow
    Date.tomorrow.to_time
  end

  def in_short_time_format
    strftime('%l:%M%p').downcase
  end
end

# And here's what we actually do:
puts Task.due(Time.tomorrow).sort
puts Event.occurring(Time.now..Time.tomorrow).sort
