#!/bin/bash

# This script watches for file changes (via fswatch) in your git repository,
# runs your configured test command(s), and commits if they pass, reverts if
# they fail.
#
# This is Kent Beck's TCR idea:
# - test && commit || revert - Kent Beck - Medium
#   https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864
# - TCR test && commit || revert -- Rope in Python
#   https://www.youtube.com/playlist?list=PLlmVY7qtgT_nhLyIbeAaUlFOWbWT5y53t
#
# I'm interested in TCR as a forcing function for:
# 1. Keeping me focused, rather than rambling about in the code
# 2. Keeping me oriented toward refactoring as the language of change
# 3. Keeping the tests really really fast

set -euo pipefail

create_a_base_commit() {
  # Let's clear the screen before we get started.
  tput reset

  # Now, TCR makes a lot (a LOT!) of small commits with meaningless messages.
  # Maybe we don't worry about them! See Limbo: https://medium.com/@kentbeck_7670/limbo-on-the-cheap-e4cfae840330
  # But for me, for now, on my projects, I'd like to squash a session's work into one commit.
  # So we start by making an empty base commit (with a fun message!) here before we enter the TCR loop.
  emoji=("🍻" "🦖" "🌯" "🍕" "🎸" "🚀" "🦏" "🍩" "🍦")
  random_emoji=${emoji[$RANDOM % ${#emoji[@]} ]}
  git commit --message "$random_emoji" --allow-empty
}

test_and_commit_or_revert() {
  # Clear the screen at the beginning of each run.
  tput reset

  # A cyan heading and a little whitespace help me scan the output.
  run() {
    echo "$(tput setaf 6)$*$(tput sgr0)"
    eval $*
    echo
  }

  # When the code gets reverted, it's helpful to see what we had tried.
  run git --no-pager diff

  # Now, let's run the tests.
  # As soon as any test fails, this subshell exits with failure.
  # We don't want that to kill the whole script, so we jankily hop in & out of `set -e`.
  set +e; ( set -e

    # (And how to emit `run`'s lovely balancing newline on failure?
    #  Like this. So cool!)
    set -E; trap echo ERR

    # Where to store the project-specific test commands?
    # Scripts or config files are messy -- and we're already using git!
    # So put it in a multi-valued git config key:
    git config --get-all tcr.command | while read -r command; do run $command; done
  )

  result=$?; set -e

  if [ $result -eq 0 ]; then
    run git commit --all --amend --no-edit --allow-empty
  else
    run git reset --hard
  fi
}

# Start off with a fresh base commit.
create_a_base_commit

# We can hit ctrl-\ to tidy up the previous base commit and start working on a new one.
trap "git commit --amend --allow-empty; create_a_base_commit" QUIT

# Why not just use fswatch's own looping?
# Because the revert would otherwise trigger another burst of fswatch events,
# and we want to leave the bad diff and the test failures on the screen.
running=1; trap "running=0" INT

while [ $running -eq 1 ]; do
  fswatch --one-event --latency 0.1 $(git ls-files) | read && test_and_commit_or_revert
done

# And when we're done, let's tidy up after ourselves.
git commit --amend --allow-empty

# You can get fswatch via `brew install fswatch`
# http://emcrisostomo.github.io/fswatch/getting.html
#
# TODO see also entr:
# https://jvns.ca/blog/2020/06/28/entr/
# http://eradman.com/entrproject/
# https://github.com/eradman/entr/
