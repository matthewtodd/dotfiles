#!/usr/bin/env ruby --disable-all -swU

require "fiddle"
require "fiddle/import"
require "open3"
require "timeout"
require "tmpdir"

# For file watching, I could shell out to something like [fswatch][] or
# [entr][], or I could do something in pure Ruby, as in [filewatcher][].
# There's also the chance to maybe drop down to C and use Apple's [File System
# Events API][] or kernel queues. The [tradeoffs][] between those are described
# in this Apple document.
#
# I wonder if it might be enough to watch directories. Do their mtimes change
# when the files they contain do? That's something I can easily test.
#
# [fswatch]: https://emcrisostomo.github.io/fswatch/
# [entr]: https://eradman.com/entrproject/
# [filewatcher]: https://github.com/filewatcher/filewatcher
# [File System Events API]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289
# [tradeoffs]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/KernelQueues/KernelQueues.html
#
# I've read their implementations, and, interestingly,
# [entr uses kqueue][entr implementation] and
# [fswatch uses Apple's File System Events][fswatch implementation].
#
# [entr implementation]: https://github.com/eradman/entr/blob/7d8e4a3102a71023e0bb6c2521e02975be709d88/entr.c#L161
# [fswatch implementation]: https://github.com/emcrisostomo/fswatch/tree/master/libfswatch/src/libfswatch/c++
#
# I also see that I can make (non-portable) syscalls from Ruby (with
# Kernel#syscall), and that there are kqueue and kevent syscalls that I think
# I've heard about having been used for file watching.
#
# I can read about using these syscalls in `man kqueue`.
#
# Reading there now, it looks like I can make a single ~composite filter that
# will match any of the file changes I care about. If I can get that to work,
# perhaps it will be simpler than managing multiple filters?
#
# Some code I can probably learn from here is in the gem
# https://github.com/mat813/rb-kqueue
# I think I want to not take on any external dependencies for this script, so I
# won't use either this gem or its FFI approach; and my code won't be easily
# portable -- I'll have to do the different syscall arguments for each platform
# I want to support (probably just macOS, though).
#
# It looks like there are lots of things I can watch for!
# https://github.com/mat813/rb-kqueue/blob/f37671562f0c71c2ead8a174933890e8d7c6781c/lib/rb-kqueue/queue.rb#L182-L228
# What's the first simple path in? Ideas are:
# - Watching an existing file I know about.
# - Watching a directory for new files.
#
# Since directories open up some complications and using this API at all is
# going to start off complicated, let me start with the simple known-file
# watching case.
#
# I'm looking at multiple event triggers, so it feels like either select or
# Go's waiting for multiple channels thing. I wonder how I could do that here.
# Maybe with something that looks like an event loop, checking all the inboxes?
# Or could I do something gross like signalling myself? Or maybe what this
# looks like is lots of actors writing to a Queue, with the main process
# blocking reading on it. That would mean no pre-empting?
#
# I'm noticing a Stopper type to handle ctrl-c. Maybe there are lots of things
# in this queue soup? Or maybe it's just keyboard and filesystem. Does this
# become event sourcing??
#
# At this point there might be some benefit to writing this code in a different
# language. It might be that Go has something to offer, and it would give me
# practice writing a small standalone Go application. But I think I want to
# stay in fun, irresponsible space for now, and Go starts to feel too much like
# responsible learning.
module System
  # I would have just made syscalls (instead of using Fiddle), but:
  # /Users/matthewtodd/Personal/matthewtodd/dotfiles/bin/tcr2:82:in `syscall': syscall() function is unimplemented on this machine (NotImplementedError)
  extend Fiddle::Importer

  # Use `nm -gU /usr/lib/system/libsystem_kernel.dylib` to see what symbols are exported.
  dlload "/usr/lib/system/libsystem_kernel.dylib"

  # Use `man kqueue` for documentation on these.
  extern "int kqueue()"
  extern "int kevent(int kq, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);"

  KEvent = struct [
    # Value used to identify the source of the event. The exact interpretation
    # is determined by the attached filter, but often is a file descriptor.
    "uintptr_t ident",

    # Identifies the kernel filter used to process this event. The pre-defined
    # system filters are described below.
    "int16_t filter",

    # Actions to perform on the event.
    "uint16_t flags",

    # Filter-specific flags.
    "uint32_t fflags",

    # Filter-specific data value.
    "intptr_t data",

    # Opaque user-defined value passed through the kernel unchanged. It can
    # optionally be part of the uniquing decision of the kevent system.
    "void *udata",
  ]

  # This is available under /Library/Developer/CommandLineTools/SDKs/MacOSX14.4.sdk/usr/include.
  Timespec = struct [
    "long tvsec", # Actually __darwin_time_t, which is a typedef for long.
    "long tv_nsec",
  ]
end

class SystemTest
  def test_learning_how_kqueue_works
    kq = System.kqueue

    # do a native open?

    # call kevent with fd, changelist & nchanges, nil other things
    change = System::KEvent.malloc(Fiddle::RUBY_FREE)
    change["ident"] = 0
    change["filter"] = 0
    change["flags"] = 0
    change["flags"] = 0
    change["data"] = nil
    change["udata"] = nil

    System.kevent(kq, change.to_ptr, 1, nil, 0, nil) # this currently returns -1 because `change` isn't well configured

    # change the file with ruby / system

    # call kevent with fd, allocated eventlist & nevents

    # loop over eventlist, looking at results
  end
end

class Watcher
  def initialize(*files)
    @files = files
  end

  def watch
    # Open each file to get a descriptor.
    sleep 0.25
  end
end

class WatcherTest
  def test_watch
  end
end

# ANSI escape codes for clearing the terminal screen.
# https://en.wikipedia.org/wiki/ANSI_escape_code
# CSI n J - Clears part of the screen. If n is 2, clear entire screen (and
#   moves cursor to upper left on DOS ANSI.SYS). If n is 3, clear entire screen
#   and delete all lines saved in the scrollback buffer (this feature was added
#   for xterm and is supported by other terminal applications).
# CSI n ; m H - Moves the cursor to row n, column m. The values are 1-based,
#   and default to 1 (top left corner) if omitted.
#
# I couldn't get this to work with just \e[2J or \e[3J, then I found the whole
# string buried in the code for `jest --watch`:
# https://github.com/facebook/jest/blob/b38d7d345a81d97d1dc3b68b8458b1837fbf19be/packages/jest-util/src/specialChars.ts#L18
CLEAR = "\e[2J\e[3J\e[H"

class Application
  def run
    print CLEAR
    puts "🥷🏻 test && commit || revert"

    # I think this while loop is going to turn into selecting on the file
    # descriptor / IO returned by kqueue. That needs mapping from fd to IO
    # (unless select can just take an fd?) and I guess flags to mark the events
    # I'm looking for as one-shot?
    # Scratch some of that, I think each event's associated with a single fd,
    # and the filters are for events on that fd.
    # If I want to make the syscalls directly without ffi, I need to pass
    # pointers to kevent structs, which means I think I'm generating their
    # bytes in a string!
    # Open questions:
    # - How to handle out parameters? (I have to call kevent, I think, to both
    #   register my interest and receive events.)
    # - Is the DL (Fiddle) library part of the stdlib? Why, yes, it is!
    #   https://ruby-doc.org/stdlib-2.5.3/libdoc/fiddle/rdoc/Fiddle.html
    loop do
      Watcher.new("README.md").watch

      # TODO figure out the timing for testing these events.
      # Currently I can block to wait for screen content but not git commits.
      system "git commit -am 'COMMIT'", out: "/dev/null"
      print CLEAR
      puts "Woo!"
    end
  end
end

class ApplicationTest
  TCR = File.expand_path(__FILE__)

  def test_pass_commit
    Dir.mktmpdir do |pwd|
      Dir.chdir(pwd) do
        system "git init"
        system "git config tcr.command /bin/true"
        system "touch README.md"
        system "git add README.md"
        system "git commit -m 'Initial commit.'"

        tcr = Driver.new IO.popen(TCR, err: :out)
        tcr.assert_screen("🥷🏻 test && commit || revert\n")

        # Let's take a slightly different approach to my first tcr script here:
        # - no base commit, so I can ctrl-c without affecting any state
        # - just make a long string of tiny commits (can later support amend or
        #   fixup)
        # - am I going to read any file? or just git files? I kind of want any
        #   file that hasn't been gitignored; so any file that git would tell
        #   me about. I'm not sure what the implications of that decision are,
        #   but it has been annoying to dance around new files. This means that
        #   tcr2 is going to `git add -N`. I will need to see how this plays
        #   out, but it may be nice to save the annoyance.
        system "echo '# My Project' >> README.md"

        tcr.assert_screen("Woo!\n")
        commits = system("git log --pretty=oneline").lines
        assert_equal 2, commits.length, commits.join
      end
    end
  end

  private

  def system *args, **kwargs
    out, _, _ = Open3.capture3(*args)
    out
  end

  class Driver
    include Timeout

    def initialize(io)
      @io = io
      at_exit { Process.kill("TERM", @io.pid) }
    end

    def assert_screen(expected)
      actual = timeout(1) { @io.readpartial(CLEAR.bytesize) }
      assert_equal CLEAR.force_encoding("ascii-8bit"), actual
      actual = timeout(1) { @io.readpartial(expected.bytesize) }
      assert_equal expected.force_encoding("ascii-8bit"), actual
    end
  end
end

# Test runners can be simple! It's simpler to read and write this one than it
# is to write a minitest plugin or manage dependencies.
class TestRunner
  def initialize(io)
    @listener = Listener.new(io)
    @tests = ObjectSpace.
      each_object(Class).
      select { |klass| klass.name =~ /Test$/ }.
      flat_map { |klass| klass.
        public_instance_methods.
        grep(/^test_/).
        map { |method| [klass, method] }
      }
  end

  def run
    @listener.start
    @tests.each { |klass, method| run_test(klass, method) }
    @listener.finish
  end

  private

  def run_test(klass, method)
    klass.new.send(method)
  rescue => e
    @listener.failure(klass, method, e)
  else
    @listener.success(klass, method)
  end

  class Listener
    def initialize(io)
      @io = io
      @failures = []
    end

    def start
      @failures.clear
    end

    def success(klass, method)
      @io.write "\e[32m.\e[0m"
    end

    def failure(klass, method, e)
      @io.write "\e[31mF\e[0m"
      @failures << [klass, method, e]
    end

    def finish
      @io.puts

      @failures.each do |klass, method, e|
        @io.puts
        @io.puts "\e[31m#{klass}##{method}\e[0m"
        @io.puts e.message
        @io.puts e.backtrace
      end

      @failures.count
    end
  end
end

# It's a little funny not to tuck this in a module or something, but I kind of
# like avoiding the noise of a module inclusion.
def assert_equal(expected, actual, message = nil)
  raise message unless expected == actual
end

# The -s switch in our shebang line captures command-line flags as global
# variables, so we can run `tcr -t` for self testing.
if global_variables.include? :$t
  exit TestRunner.new(STDOUT).run
elsif __FILE__ == $0
  $stdout.sync = true
  Application.new.run
end
